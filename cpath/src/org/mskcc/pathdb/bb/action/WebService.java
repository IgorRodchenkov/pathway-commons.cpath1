package org.mskcc.pathdb.bb.action;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.mskcc.pathdb.model.*;
import org.mskcc.pathdb.sql.dao.*;
import org.mskcc.pathdb.xdebug.XDebug;
import org.mskcc.pathdb.action.BaseAction;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.PrintWriter;
import java.util.ArrayList;

public class WebService extends BaseAction {

    public ActionForward subExecute (ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response, XDebug xdebug)
            throws Exception {
        response.setContentType("text/plain");
        PrintWriter writer = response.getWriter();
        String action = request.getParameter("action");
        if (action != null && action.equals("getMembers")) {
            getMembers(request, writer);
        } else {
            getPathways(request, writer);
        }
        return null;
    }

    private void getPathways (HttpServletRequest request, PrintWriter writer) throws DaoException {
        String q = request.getParameter("q");
        if (q == null || q.equals("")) {
            writer.println("Ooops.  Please specify an Entrez Gene ID, e.g. q=1950");
        } else {
            DaoExternalDb dao = new DaoExternalDb();
            ExternalDatabaseRecord dbRecord = dao.getRecordByTerm("ENTREZ_GENE");
            DaoExternalLink linker = DaoExternalLink.getInstance();
            ArrayList recordList = linker.getRecordByDbAndLinkedToId(dbRecord.getId(), q);
            if (recordList.size() == 0) {
                writer.println("Ooops.   No matches found for ENTREZ_GENE: " + q);
            } else if (recordList.size() > 1) {
                writer.println("Ooops.   Multiple matches found for:  " + q);
            } else {

                DaoInternalFamily daoFamily = new DaoInternalFamily();
                ExternalLinkRecord externalLink = (ExternalLinkRecord) recordList.get(0);
                long pathwayIds[] = daoFamily.getAncestorIds(externalLink.getCpathId(),
                        CPathRecordType.PATHWAY);
                writer.println("#Generated by Bare Bones Pathway Commons");
                writer.println("#ID [TAB] Pathway Name [TAB] Data Source");
                for (int i = 0; i < pathwayIds.length; i++) {
                    DaoCPath daoCPath = DaoCPath.getInstance();
                    CPathRecord record = daoCPath.getRecordById(pathwayIds[i]);
                    long snapshotId = record.getSnapshotId();
                    DaoExternalDbSnapshot daoSnapshot = new DaoExternalDbSnapshot();
                    ExternalDatabaseSnapshotRecord snapshotRecord = daoSnapshot.getDatabaseSnapshot(snapshotId);
                    writer.println(record.getId() + "\t"
                            + record.getName() + "\t" + snapshotRecord.getExternalDatabase().getMasterTerm());
                }
            }
        }
    }

    private void getMembers (HttpServletRequest request, PrintWriter writer) throws DaoException {
        String q = request.getParameter("q");
        if (q == null || q.equals("")) {
            writer.println("Ooops.  Please specify a cPath ID, e.g. q=1");
        } else {
            DaoCPath dao = DaoCPath.getInstance();
            DaoExternalDbSnapshot daoSnapshot = new DaoExternalDbSnapshot();
            CPathRecord record = dao.getRecordById(Integer.parseInt(q));
            writer.println("#Generated by Bare Bones Pathway Commons");
            writer.println("#Pathway Name:  " + record.getName());
            ExternalDatabaseSnapshotRecord snapshot =
                    daoSnapshot.getDatabaseSnapshot(record.getSnapshotId());
            writer.println("#Data Source:  " + snapshot.getExternalDatabase().getMasterTerm());
            writer.println("#Name   [TAB] [ENTREZ GENE ID || ChEBI ID || NO_IDS]");
            DaoInternalFamily daoFamily = new DaoInternalFamily();
            long peIds[] = daoFamily.getDescendentIds(Integer.parseInt(q),
                    CPathRecordType.PHYSICAL_ENTITY);
            DaoExternalLink daoExternalLink = DaoExternalLink.getInstance();
            for (int i=0; i<peIds.length; i++) {
                CPathRecord peRecord = dao.getRecordById(peIds[i]);
                //  Don't show complexes
                if (!peRecord.getSpecificType().equalsIgnoreCase("complex")) {
                    writer.print(peRecord.getName());
                    ArrayList xrefList = daoExternalLink.getRecordsByCPathId(peRecord.getId());
                    int counter = 0;
                    writer.print("\t");
                    for (int j=0; j<xrefList.size(); j++) {
                        ExternalLinkRecord xref = (ExternalLinkRecord) xrefList.get(j);
                        String dbTerm = xref.getExternalDatabase().getMasterTerm();
                        if (dbTerm.equals("ENTREZ_GENE") || dbTerm.equals("ChEBI")) {
                            writer.print(dbTerm+":" + xref.getLinkedToId() + " ");
                            counter++;
                        }
                    }
                    if (counter == 0) {
                        writer.print("NO_IDS");
                    }
                    writer.println();
                }
            }
        }
    }
}
