<!--	
	CPath Ant Script.
	Author:  Ethan Cerami
-->

<project name="CPath" default="compile" basedir=".">
	<!-- ==================== File and Directory Names ======================== -->

        <!-- The directory containing the configuration files -->
        <property name="config.dir" value="config"/>

	<!-- The lib directory -->
	<property name="lib.dir" value="lib"/>
	
	<!-- Production Directory -->
        <property name="prod.dir" value="/var/lib/tomcat4/webapps"/>

	<!-- Lucene Directory -->
        <property name="lucene.dir" value="textIndex"/>

	<!-- Junit Directory -->
	<property name="junit.dir" value="junit"/>

  	<property file="build.properties"/>
  	<property file="${user.home}/build.properties"/>

	<property name="app.name"      value="cpath"/>
  	<property name="app.path"      value="/${app.name}"/>
  	<property name="app.version"   value="0.1-dev"/>
  	<property name="build.home"    value="${basedir}/build"/>
  	<property name="catalina.home" value="../../../.."/> <!-- UPDATE THIS! -->
  	<property name="dist.home"     value="${basedir}/dist"/>
  	<property name="manager.url"   value="http://localhost:8080/manager"/>
  	<property name="src.home"      value="${basedir}/src"/>
  	<property name="web.home"      value="${basedir}/web"/>

	<!-- ================== Custom Ant Task Definitions ======================= -->
  	<taskdef name="install" classname="org.apache.catalina.ant.InstallTask"/>
  	<taskdef name="list"    classname="org.apache.catalina.ant.ListTask"/>
  	<taskdef name="reload"  classname="org.apache.catalina.ant.ReloadTask"/>
  	<taskdef name="remove"  classname="org.apache.catalina.ant.RemoveTask"/>
  	<taskdef resource="checkstyletask.properties"/>


	<!--  ==================== Compilation Control Options ==================== -->
  	<property name="compile.debug"       value="true"/>
  	<property name="compile.deprecation" value="false"/>
  	<property name="compile.optimize"    value="true"/>

	<!-- ==================== Compilation Classpath =========================== -->
 	<path id="compile.classpath">
		<pathelement path="${build.home}/WEB-INF/classes"/>
		<fileset dir="${lib.dir}">
       		 	<include name="**/*.jar"/>
		</fileset>
  	</path>

<!-- ==================== All Target ====================================== -->

  <target name="all" depends="clean,compile"
   description="Clean build and dist directories, then compile"/>


<!-- ==================== Clean Target ==================================== -->

  <target name="clean" description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
    <delete dir="${lucene.dir}"/>
    <delete dir="${junit.dir}"/>
    <delete dir="target"/>
    <delete>
        <fileset dir="." includes="*.log*"/>
    </delete>
  </target>

<!-- ==================== Compile Target ================================== -->

  <target name="compile" depends="prepare" description="Compile Java sources">
    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${build.home}/WEB-INF/classes"/>
    <javac srcdir="${src.home}"
          destdir="${build.home}/WEB-INF/classes"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
    </javac>

    <!-- Copy application resources -->
    <copy  todir="${build.home}/WEB-INF/classes">
      <fileset dir="${src.home}" excludes="**/*.java"/>
    </copy>
    <copy todir="${build.home}/WEB-INF/lib">
      <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </copy>

   <!-- Copy oscache.properties -->
   <copy todir="${build.home}/WEB-INF/classes" file="${config.dir}/oscache.properties"/>

   <!-- Copy cpathResources.properties -->
   <copy todir="${build.home}/WEB-INF/classes" file="${config.dir}/cpathResources.properties"/>

   <!-- Copy logger properties -->
   <copy todir="${build.home}/WEB-INF/config" file="${config.dir}/config-JDBC.properties"/>
  </target>

<!-- ==================== War Target ===================================== -->

  <target name="war" depends="compile"
   description="Create binary WAR distribution">
    <mkdir  dir="${dist.home}"/>
    <!-- Create application WAR file -->
    <jar jarfile="${dist.home}/${app.name}.war"
         basedir="${build.home}"/>
  </target>

  <target name="deploy_war" depends="war" description="Deploy WAR to cBIO Production">
    <apply executable="scp">
   	<srcfile/>
        <fileset dir="${dist.home}">
        	<include name="*.war"/>
        </fileset>
        <arg line="cerami@cbio:${prod.dir}"/>
     </apply>
  </target>

<!-- ==================== Install Target ================================== -->

<!--

  The "install" target tells the specified Tomcat 4 installation to dynamically
  install this web application and make it available for execution.  It does
  *not* cause the existence of this web application to be remembered across
  Tomcat restarts; if you restart the server, you will need to re-install all
  this web application.

  If you have already installed this application, and simply want Tomcat to
  recognize that you have updated Java classes (or the web.xml file), use the
  "reload" target instead.

  NOTE:  This target will only succeed if it is run from the same server that
  Tomcat is running on.

  NOTE:  This is the logical opposite of the "remove" target.

-->

  <target name="install" depends="compile"
   description="Install application to servlet container">

    <install url="${manager.url}"
        username="${manager.username}"
        password="${manager.password}"
            path="${app.path}"
             war="file://${build.home}"/>

  </target>

<!-- ====================== List Target =================================== -->

<!--

  The "list" target asks the specified Tomcat 4 installation to list the
  currently running web applications, either loaded at startup time or
  installed dynamically.  It is useful to determine whether or not the
  application you are currently developing has been installed.

-->

  <target name="list"
   description="List installed applications on servlet container">

    <list    url="${manager.url}"
        username="${manager.username}"
        password="${manager.password}"/>

  </target>


<!-- ==================== Prepare Target ================================== -->

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

  <target name="prepare">

    <!-- Create build directories as needed -->
    <mkdir  dir="${build.home}"/>
    <mkdir  dir="${build.home}/WEB-INF"/>
    <mkdir  dir="${lucene.dir}"/>
    <mkdir  dir="${build.home}/WEB-INF/classes"/>
    <mkdir  dir="${junit.dir}"/>

    <!-- Copy static content of this web application -->
    <copy todir="${build.home}">
      <fileset dir="${web.home}"/>
    </copy>

    <!-- Copy external dependencies as required -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
    <mkdir  dir="${build.home}/WEB-INF/lib"/>

    <!-- Copy static files from external dependencies as needed -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

  </target>


<!-- ==================== Reload Target =================================== -->

<!--

  The "reload" target tells the specified Tomcat 4 installation to dynamically
  reload this web application, to reflect changes in the underlying classes or
  the "web.xml" deployment descriptor.

-->

  <target name="reload" depends="compile"
   description="Reload application on servlet container">

    <reload url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"/>

  </target>


<!-- ==================== Remove Target =================================== -->

<!--

  The "remove" target tells the specified Tomcat 4 installation to dynamically
  remove this web application from service.

  NOTE:  This is the logical opposite of the "install" target.

-->

  <target name="remove"
   description="Remove application on servlet container">

    <remove url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"/>

  </target>

        <!--  Target to Run CheckStyle on all Source Code -->
        <!--  Uses the Sun Coding Conventions Configuration -->
        <target name="check" description="Run CheckStyle on all source code">
                <checkstyle config="${config.dir}/sun_checks.xml">
                        <fileset dir="${src.home}">
                                <include name="**/*.java"/>
                        </fileset>
                </checkstyle>
        </target>

	<!-- Target to Load Bootstrap data into MySQL -->
	<target name="boot" depends="compile" description="Loads Bootstrap data into MySQL">
		<exec dir="." executable="scripts/boot.pl"/>
	</target>

	<target name="test" depends="compile" description="Runs JUnit Tests">
		<junit printsummary="yes" fork="yes" haltonfailure="no">
			<formatter type="xml"/>
			<test name="org.mskcc.pathdb.test.AllTest"
				todir="${junit.dir}"/>
			<classpath refid="compile.classpath"/>
		</junit>
	 </target>

	<target name="prepare_dev_site" depends="prepare"
		description="Prepares Dev Site">
		<replace file="${basedir}/project.xml">
 		<replacetoken>scm:cvs:ext:cerami@cbio.mskcc.org:/var/lib/cvs:cpath</replacetoken>
  		<replacevalue>scm:cvs:local:ignored:/var/lib/cvs:cpath</replacevalue>
		</replace>
		<replace file="${basedir}/project.properties">
		<replacetoken>maven.site.deploy.method = ssh</replacetoken>
		<replacevalue>maven.site.deploy.method = fs</replacevalue>
		</replace>
	</target>
</project>
