<?xml version="1.0"?>
<!--
	CPath Ant Build Script.
	Author:  Ethan Cerami
-->

<project name="CPath" default="compile" basedir=".">
    <!--  Environment Variables -->
    <property environment="env"/>

    <!--  Set cPath Home -->
    <property name="cPath.home" value="${env.CPATH_HOME}"/>

    <!-- The build directory -->
    <!-- All files generated by ant go here -->
    <property name="build.dir"    value="${basedir}/build"/>

    <!-- The war build directory -->
    <!-- All generated war files go here -->
    <property name="war.dir" value="${build.dir}/war"/>

	<!-- The Junit build directory -->
    <!-- Auto-genearted Junit reports go here -->
	<property name="junit.dir" value="${build.dir}/junit"/>

    <!-- AntEater build directory -->
    <property name="ant_eater.dir" value="${build.dir}/ant_eater"/>

    <!-- The java source directory-->
    <property name="src.dir"      value="${basedir}/src"/>

    <!-- The web source directory -->
    <property name="web.dir"      value="${basedir}/web"/>

    <!-- The lib directory -->
    <!-- Contains all third-party JAR files, required for compilation -->
    <property name="lib.dir"       value="lib"/>

    <!-- The config directory-->
    <property name="config.dir"    value="config"/>

    <!-- The config directory-->
    <property name="bin.dir"    value="${basedir}/bin"/>

    <!--  Build.properties File -->
  	<property file="build.properties"/>

    <!-- Servlet Container Properties -->
  	<property name="app.path"      value="/${app.name}"/>
  	<property name="manager.url"   value="http://localhost:8080/manager"/>

	<!-- ============= Custom Ant Task Definitions ======================= -->
  	<taskdef name="install" classname="org.apache.catalina.ant.InstallTask"/>
  	<taskdef name="list"    classname="org.apache.catalina.ant.ListTask"/>
  	<taskdef name="reload"  classname="org.apache.catalina.ant.ReloadTask"/>
  	<taskdef name="remove"  classname="org.apache.catalina.ant.RemoveTask"/>
  	<taskdef resource="checkstyletask.properties"/>

	<!--  ============ Compilation Control Options ======================= -->
  	<property name="compile.debug"       value="true"/>
  	<property name="compile.deprecation" value="false"/>
  	<property name="compile.optimize"    value="true"/>

	<!-- ==================== Compilation Classpath ====================== -->
 	<path id="compile.classpath">
		<pathelement path="${build.dir}/WEB-INF/classes"/>
		<fileset dir="${lib.dir}">
       		 	<include name="*.jar"/>
		</fileset>
  	</path>

    <!-- ==================== Clean Target =============================== -->
    <target name="clean"
        description="Deletes all build files and starts fresh.">
        <delete dir="${build.dir}"/>
        <delete dir="ant_eater/reports"/>
        <delete dir="ant_eater/logs"/>
        <delete dir="bin/_tempIndexDir0"/>
        <delete dir="bin/_tempIndexDir1"/>
        <delete dir="bin/_tempIndexDir2"/>
        <delete dir="bin/_tempIndexDir3"/>
        <delete>
            <fileset dir="." includes="*.log*"/>
        </delete>
    </target>

    <!-- ==================== Compile Target ==============================-->
    <target name="compile" depends="prepare"
        description="Compile all Java source files.">
        <mkdir dir="${build.dir}/WEB-INF/classes"/>
        <javac srcdir="${src.dir}"
            destdir="${build.dir}/WEB-INF/classes"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
        </javac>

        <!-- Copy application resources -->
        <copy  todir="${build.dir}/WEB-INF/classes">
          <fileset dir="${src.dir}" excludes="**/*.java"/>
        </copy>
        <copy todir="${build.dir}/WEB-INF/lib">
          <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </copy>

        <!-- Copy Struts cpathResources.properties -->
        <copy todir="${build.dir}/WEB-INF/classes"
            file="${config.dir}/cpathResources.properties"/>

        <!-- Copy Cache Config -->
        <copy todir="${build.dir}/WEB-INF/classes"
            file="${config.dir}/ehcache.xml"/>
    </target>

    <!-- ==================== War Target ================================== -->
    <target name="war" depends="compile"
        description="Creates binary WAR distribution.">
        <mkdir dir="${war.dir}"/>
        <jar jarfile="${war.dir}/${app.name}_${app.version}.war"
             basedir="${build.dir}"/>
    </target>

    <!-- ==================== Install Target =============================== -->
    <!--

      The "install" target tells the specified Tomcat installation to dynamically
      install this web application and make it available for execution.  It does
      *not* cause the existence of this web application to be remembered across
      Tomcat restarts; if you restart the server, you will need to re-install all
      this web application.

      If you have already installed this application, and simply want Tomcat to
      recognize that you have updated Java classes (or the web.xml file), use the
      "reload" target instead.

      NOTE:  This target will only succeed if it is run from the same server that
      Tomcat is running on.

      NOTE:  This is the logical opposite of the "remove" target.

    -->
    <target name="install" depends="compile"
        description="Installs cPath to local development servlet container.">
        <install url="${manager.url}"
            username="${manager.username}"
            password="${manager.password}"
            path="${app.path}"
            war="file://${build.dir}"/>
    </target>

    <!-- ====================== List Target ================================ -->
    <!--

      The "list" target asks the specified Tomcat 4 installation to list the
      currently running web applications, either loaded at startup time or
      installed dynamically.  It is useful to determine whether or not the
      application you are currently developing has been installed.

    -->
    <target name="list"
        description="Lists installed applications on servlet container">
        <list
            url="${manager.url}"
            username="${manager.username}"
            password="${manager.password}"/>
    </target>


    <!-- ==================== Prepare Target ============================== -->
    <!--

      The "prepare" target is used to create the "build" destination directory,
      and copy the static contents of your web application to it.  If you need
      to copy static files from external dependencies, you can customize the
      contents of this task.

      Normally, this task is executed indirectly when needed.

    -->
    <target name="prepare">

        <!-- Create build directories as needed -->
        <mkdir  dir="${build.dir}"/>
        <mkdir  dir="${build.dir}/WEB-INF"/>
        <mkdir  dir="${build.dir}/WEB-INF/classes"/>
        <mkdir  dir="${junit.dir}"/>
        <mkdir  dir="${junit.dir}/reports"/>

        <!-- Copy static content of this web application -->
        <copy todir="${build.dir}">
          <fileset dir="${web.dir}"/>
        </copy>

        <!-- Force copy of web.xml -->
        <copy overwrite="yes" todir="${build.dir}/WEB-INF"
            file="${web.dir}/WEB-INF/web.xml"/>

        <!-- Copy external dependencies as required -->
        <mkdir  dir="${build.dir}/WEB-INF/lib"/>

        <!-- Prepare web.xml, based on build.properties -->
		<replace file="${build.dir}/WEB-INF/web.xml"
             token="db_host__value" value="${db.host}"
             summary="yes"/>
        <replace file="${build.dir}/WEB-INF/web.xml"
             token="db_name__value" value="${db.name}"
             summary="yes"/>
        <replace file="${build.dir}/WEB-INF/web.xml"
             token="db_user__value" value="${db.user}"
             summary="yes"/>
        <replace file="${build.dir}/WEB-INF/web.xml"
             token="db_password__value" value="${db.password}"
             summary="yes"/>
        <replace file="${build.dir}/WEB-INF/web.xml"
             token="admin_user__value" value="${web.admin.user}"
             summary="yes"/>
        <replace file="${build.dir}/WEB-INF/web.xml"
             token="admin_password__value" value="${web.admin.password}"
             summary="yes"/>
        <replace file="${build.dir}/WEB-INF/web.xml"
             token="web_mode__value" value="${web.mode}"
             summary="yes"/>
        <replace file="${build.dir}/WEB-INF/web.xml"
             token="admin_mode_active__value" value="${web.admin.active}"
             summary="yes"/>
    </target>

    <!-- ==================== Reload Target =============================== -->
    <!--

      The "reload" target tells the specified Tomcat 4 installation to dynamically
      reload this web application, to reflect changes in the underlying classes or
      the "web.xml" deployment descriptor.

    -->
    <target name="reload" depends="compile"
        description="Reloads cPath application on servlet container.">
        <reload url="${manager.url}"
           username="${manager.username}"
           password="${manager.password}"
           path="${app.path}"/>
    </target>


    <!-- ==================== Remove Target =============================== -->
    <!--

      The "remove" target tells the specified Tomcat 4 installation to dynamically
      remove this web application from service.

      NOTE:  This is the logical opposite of the "install" target.

    -->
    <target name="remove"
        description="Removes cpath application on servlet container.">
        <remove url="${manager.url}"
           username="${manager.username}"
           password="${manager.password}"
           path="${app.path}"/>
    </target>

    <!-- ==================== Checkstyle Target =========================== -->
    <!--
        Target to Run CheckStyle on all Source Code
        Uses the Sun Coding Conventions Configuration
    -->
    <target name="check" description="Run CheckStyle on all source code.">
        <checkstyle config="${config.dir}/sun_checks.xml">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </checkstyle>
    </target>

    <!-- ==================== test Target ======================== -->
	<target name="test" depends="test_prepare, test_run, test_report"
        description="Loads sample data into MySQL, runs JUnit tests, generates test reports.">
	</target>

    <!-- ==================== prepare_test Target ======================== -->
	<!--
        Prepares the Database for JUnit Testing
    -->
	<target name="test_prepare" depends="compile"
        description="Loads test data set into MySQL.  Required for running JUnit Tests.">
        <echo>Using CPATH_HOME:  ${cPath.home}</echo>
        <exec dir="${basedir}/bin" executable="${basedir}/bin/initDb.pl">
            <arg line="-f load_test_data"/>
            <env key="CPATH_HOME" value="${cPath.home}"/>
        </exec>
	</target>

    <!-- ==================== test Target ================================ -->
	<target name="test_run" depends="compile"
        description="Runs all JUnit Tests">
        <echo>Running from basedir:  ${basedir}</echo>
        <delete dir="${junit.dir}"/>
        <mkdir  dir="${junit.dir}"/>
        <mkdir  dir="${junit.dir}/reports"/>
		<junit dir="${basedir}" showoutput="no" printsummary="yes" fork="yes"
               haltonfailure="no" failureproperty="tests.failed">
            <formatter type="xml"/>
            <sysproperty key="CPATH_HOME" value="${basedir}"/>
            <test name="org.mskcc.pathdb.test.AllTest"
                haltonfailure="no" todir="${junit.dir}">
                <formatter type="xml"/>
            </test>
			<classpath refid="compile.classpath"/>
		</junit>
     </target>

    <!-- ==================== test_report Target ========================= -->
    <target name="test_report"
        description="Generates HTML Reports for All Unit Tests">
        <junitreport todir="${junit.dir}/reports">
            <fileset dir="${junit.dir}">
                <include name="*.xml"/>
            </fileset>
            <report format="noframes" todir="${junit.dir}/reports"
                styledir="${config.dir}"/>
        </junitreport>
        <echo>JUnit Reports written to:  ${junit.dir}/reports</echo>
        <fail message="Build failed because of test failure." if="tests.failed"/>
    </target>

    <!-- ==================== prepare_dev_site Target ===================== -->
	<target name="prepare_dev_site" depends="prepare"
		description="Prepares Maven developer site">
		<replace file="${basedir}/project.xml">
 		<replacetoken>scm:cvs:ext:cerami@cbio.mskcc.org:/var/lib/cvs:cpath</replacetoken>
  		<replacevalue>scm:cvs:local:ignored:/var/lib/cvs:cpath</replacevalue>
		</replace>
		<replace file="${basedir}/project.properties">
		<replacetoken>maven.site.deploy.method = ssh</replacetoken>
		<replacevalue>maven.site.deploy.method = fs</replacevalue>
		</replace>
	</target>

    <!-- ==================== prepare_cruise_control Target ===================== -->
	<target name="prepare_cruise_control" depends="prepare"
		description="Prepares Everything for Cruise Control Build">
        <replace file="${basedir}/build.properties">
         <replacetoken>db.name=cpath</replacetoken>
          <replacevalue>db.name=cpath_cruise</replacevalue>
        </replace>
    </target>

    <!-- ==================== prepare_cruise_control Target ===================== -->
	<target name="cruise_control" depends="prepare_cruise_control, test"
		description="Executes a Cruise Control Build">
    </target>
</project>